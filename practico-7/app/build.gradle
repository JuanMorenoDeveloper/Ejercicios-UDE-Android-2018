apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

//gradlew ktlintCheck
//gradlew ktlintFormat
apply plugin: 'org.jlleitschuh.gradle.ktlint'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "uy.edu.ude.myfirstkotlinapp"
        minSdkVersion 22
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco.includeNoLocationClasses = true
            }
        }
    }
}

def mainSrc = "$project.projectDir/src/main/java"
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter) +
        fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
def configDir = "${project.rootDir}/config"
def reportDir = "${project.buildDir}/reports"

//gradlew detekt
detekt {
    toolVersion = "1.0.0.RC9.2"
    input = files("src/main/java")
    filters = ".*/resources/.*,.*/build/.*"
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$reportDir/detekt.html")
        }
    }
}

ext {
    jacoco_version = '0.8.2'
}
//Jacoco
apply plugin: 'jacoco'
jacoco.toolVersion = jacoco_version
//./gradlew jacocoTestReport
task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
//./gradlew jacocoTestCoverageVerification
task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.3
            }
        }
    }
}

//Lint ./gradlew lint
android {
    lintOptions {
        abortOnError false
        xmlReport false
        htmlReport true
        lintConfig file("$configDir/lint.xml")
        htmlOutput file("$reportsDir/lint.html")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation "org.robolectric:robolectric:3.8"
    testImplementation "org.assertj:assertj-core:3.11.1"
}

