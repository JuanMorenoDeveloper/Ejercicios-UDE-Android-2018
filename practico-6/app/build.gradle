apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "uy.edu.ude.practicows"
        minSdkVersion 22
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jacoco.includeNoLocationClasses = true
            }
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

ext{
    spotbugs_version = '3.1.6'
    pmd_version = '6.8.0'
    checkstyle_version = '8.14'
    jacoco_version = '0.8.2'
}

def configDir = "${project.rootDir}/config"
def reportDir = "${project.buildDir}/reports"
def mainSrc = "$project.projectDir/src/main/java"
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
//Spotbugs ./gradlew findbugs
apply plugin: 'com.github.spotbugs'
spotbugs.toolVersion = spotbugs_version

task findbugs(type: com.github.spotbugs.SpotBugsTask, dependsOn: "assembleDebug", group: "verification") {
    ignoreFailures = true
    effort = "max"
    reportLevel = "medium"
    excludeFilter = new File("$configDir/findbugs.filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/javac")
    source 'src'
    include '**//*.java'
    exclude '**//gen//**'
    reports {
        xml.enabled = false
        html.enabled = true
        html.setDestination(new File("$reportDir/findbugs.html"))
    }
    classpath = files()
}

//
apply plugin: 'pmd'

pmd.toolVersion = pmd_version

task pmd(type: Pmd) {
    ignoreFailures = true
    ruleSetFiles = files("$configDir/pmd-ruleset.xml")
    ruleSets = []
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    reports {
        xml.enabled = false
        html.enabled = true
        html.setDestination(new File("$reportDir/pmd.html"))
    }
}

//Checkstyle ./gradlew checkstyle
apply plugin: 'checkstyle'
checkstyle.toolVersion = checkstyle_version

task checkstyle(type: Checkstyle) {
    configFile file("${configDir}/google_checks.xml")

    ignoreFailures true
    showViolations true

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
    reports {
        xml.enabled false
        html.enabled true
        html.setDestination(new File("$reportDir/checkstyle.html"))
    }
}
//Jacoco
apply plugin: 'jacoco'
jacoco.toolVersion = jacoco_version
//./gradlew jacocoTestReport
task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
//./gradlew jacocoTestCoverageVerification
task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.3
            }
        }
    }
}
//Lint ./gradlew lint
android {
    lintOptions {
        abortOnError false
        xmlReport false
        htmlReport true
        lintConfig file("$configDir/lint.xml")
        htmlOutput file("$reportsDir/lint.html")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
